/*

Copyright 2018 Intel Corporation

This software and the related documents are Intel copyrighted materials,
and your use of them is governed by the express license under which they
were provided to you (License). Unless the License provides otherwise,
you may not use, modify, copy, publish, distribute, disclose or transmit
this software or the related documents without Intel's prior written
permission.

This software and the related documents are provided as is, with no
express or implied warranties, other than those that are expressly stated
in the License.

*/

#ifndef _WIN32
#include "config.h"
#endif

enclave {
	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tkey_exchange.h"

	from "sgx_tkey_exchange.edl" import *;

	trusted {
#ifndef _WIN32
		include "config.h"
#endif

		public sgx_status_t get_report([out] sgx_report_t *report,
			[in] sgx_target_info_t *target_info);

		public size_t get_pse_manifest_size();

		public sgx_status_t get_pse_manifest([out, count=sz] char *buf, size_t sz);

		public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse,
			[out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

		public sgx_status_t enclave_ra_init_def(int b_pse,
			[out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

		public sgx_status_t enclave_ra_get_key_hash(
			[out] sgx_status_t *get_keys_status, sgx_ra_context_t ctx,
			sgx_ra_key_type_t type, [out] sgx_sha256_hash_t *hash);

		public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);

		public sgx_status_t run_interpreter(sgx_ra_context_t context,
			[user_check]unsigned char *code_cipher, size_t cipherlen,
			[in, out, size=12]unsigned char *p_iv,
			[in, out, size=16]unsigned char *tag,
			[in, out, size=10000]unsigned char *result_cipher,
			[out]size_t *res_len);

		public sgx_status_t process_login_info(sgx_ra_context_t context,
			[in, size=cipherlen]uint8_t *login_info_cipher, size_t cipherlen,
			[in, out, size=12]uint8_t *p_iv, [in, out, size=16]uint8_t *tag,
			[in, out, size=1024]uint8_t *result_cipher, [out]size_t *res_len,
			[in, out, size=32]uint8_t *username,
			[in, out, size=33]uint8_t *password_hash,
			[in, out, size=2]uint8_t *privilege,
			[in, out, size=8]uint8_t *datatype);

		public sgx_status_t seal_data(sgx_ra_context_t context,
			[user_check]uint8_t *data_cipher, size_t cipherlen,
			[in, out, size=12]uint8_t *p_iv, [in, out, size=16]uint8_t *tag,
			[in, out, size = est_seal_len]uint8_t *sealed_data,
			size_t est_seal_len, [out]size_t *res_len);

		public sgx_status_t unseal_data(sgx_ra_context_t context,
			[user_check]uint8_t *data_cipher, size_t cipherlen);
	
		public sgx_status_t encrypt_store_status(sgx_ra_context_t context,
			size_t store_flag, [in, out, size=12]uint8_t *p_iv,
			[in, out, size=16]uint8_t *tag, 
			[in, out, size=10000]uint8_t *result_cipher,
			[out]size_t *res_len);

		public sgx_status_t process_extract_filename(sgx_ra_context_t context,
			[in, size=vctx_cipherlen]uint8_t *vctx_cipher, 
			size_t vctx_cipherlen,
			[in, size=12]uint8_t *vctx_iv, 
			[in, size=16]uint8_t *vctx_tag,
			[in, out, size=16]uint8_t *filename);

		public sgx_status_t store_vcf_contexts(sgx_ra_context_t context,
			[in, size=vctx_cipherlen]uint8_t *vctx_cipher, 
			size_t vctx_cipherlen, [in, out, size=12]uint8_t *vctx_iv, 
			[in, out, size=16]uint8_t *vctx_tag, 
			[in, size=ivlen]uint8_t *iv_array, size_t ivlen, 
			[in, size=taglen]uint8_t *tag_array, size_t taglen, 
			[out, size=emsg_len]uint8_t *error_msg_cipher, size_t emsg_len,
			[out]size_t *emsg_cipher_len);
	};

	untrusted {
#ifndef _WIN32
		include "config.h"
#endif
		void OCALL_print([in, string]const char* message);

		void OCALL_print_status(sgx_status_t st);
		
		void OCALL_print_int(int num);
		
		void OCALL_dump([in, size=bufsize]uint8_t *char_to_dump, int bufsize);
		
		void OCALL_generate_nonce([in, out, size=bufsize]uint8_t* ivbuf, int bufsize);

		void OCALL_get_time([in, out, size=bufsize]uint8_t *timebuf, int bufsize);

		int OCALL_fwrite([in, size=fnlen]uint8_t *filename, size_t fnlen,
			[in, size=buflen]uint8_t* buf, size_t buflen);

		void OCALL_fread([in, out, size=buflen]uint8_t *buf, int buflen);

		void OCALL_get_sealed_length([in, size=32]char *dataset_name,
			[out]int *sealed_length);

		void OCALL_load_db([in, out, size=buflen]uint8_t *sealed_data,
			int buflen, [in, size=32]char *dataset_name);

		void OCALL_chrono_start();

		void OCALL_chrono_end();

		void OCALL_chrono_end_get_time([out]double *elapsed);

		void OCALL_calc_inquiryDB_size([out]int *inquired_size);

		void OCALL_inquiryDB([in, out, size=buflen]uint8_t *inquiry_res,
			int buflen);

		int OCALL_select_annotation([in, string]char *id, 
			[out, size=2048]char *record, int vcf_or_list, 
			int clinvar_flag);
		
		int OCALL_store_vctx_into_db([in, size=wlst_size]uint8_t *whitelist,
			size_t wlst_size, [in, size=32]uint8_t *chrm_hash,
			[in, size=32]uint8_t *natn_hash, [in, size=32]uint8_t *dstp_hash,
			[in, size=17]uint8_t *filename, [in, size=32]uint8_t *usnm_hash, 
			int divnum, [in, size=ivlen]uint8_t *iv_array, size_t ivlen,
			[in, size=taglen]uint8_t *tag_array, size_t taglen);

	};
};

